Используя потоки создайте класс СПРАВОЧНИК со следующими полями:
1.	Название фирмы 
2.	Владелец 
3.	Телефон 
4.	Адрес 
5.	Род деятельности 
Реализовать следующие возможности: 
1.	Поиск по названию 
2.	Поиск по владельцу 
3.	Поиск по номеру телефона 
4.	Поиск по роду деятельности 
5.	Показ всех записей и добавление 
Вся информация, должна сохранятся в файле, должна быть реализована возможность добавления новых данных. 



#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <windows.h>
using namespace std;
class Catalog
{
	char* firm;
	char* owner;
	char* phone;
	char* address;
	char* occupation;
public:
	Catalog();
	~Catalog();
	void Put(); 	// функция ввода данных 
	void SaveToFile();
	static void ShowFromFile();
	static void SearchFirm(); // Поиск по названию
	static void SearchOwner(); // Поиск по владельцу
	static void SearchPhone(); // Поиск по номеру телефона
	static void SearchOccupation(); // Поиск по роду деятельности
};

Catalog::Catalog(){}

Catalog::~Catalog()
{
	delete[] firm;
	delete[] owner;
	delete[] phone;
	delete[] address;
	delete[] occupation;
}

void Catalog::Put() 	// функция ввода данных 
{
	char temp[1024];

	cout << "Введите название фирмы:\n";
	cin >> temp;
	if (firm) delete[] firm;
	firm = new char[strlen(temp) + 1];
	strcpy(firm, temp);

	cout << "Введите имя владельца:\n";
	cin >> temp;
	if (owner) delete[] owner;
	owner = new char[strlen(temp) + 1];
	strcpy(owner, temp);

	cout << "Введите телефон:\n";
	cin >> temp;
	if (phone) delete[] phone;
	phone = new char[strlen(temp) + 1];
	strcpy(phone, temp);

	cout << "Введите адрес:\n";
	cin >> temp;
	if (address) delete[] address;
	address = new char[strlen(temp) + 1];
	strcpy(address, temp);

	cout << "Введите род деятельности:\n";
	cin >> temp;
	if (occupation) delete[] occupation;
	occupation = new char[strlen(temp) + 1];
	strcpy(occupation, temp);
}

void Catalog::SaveToFile()
{
	fstream f("Catalog.txt", ios::out | ios::app);
	f << firm << ' ' << owner << ' ' << phone << ' ' << address << ' ' << occupation << "\n";
	f.close();
}

void Catalog::ShowFromFile()
{
	char buffer[50];
	fstream f("Catalog.txt", ios::in);
	while (!f.eof())
	{
		f >> buffer;
		cout << buffer << ' ';
		if (f.peek() == '\n') cout << endl;
	}
	cout << endl;
	f.close();
}

void Catalog::SearchFirm() // Поиск по названию
{
	cout << "Введите искомое слово\n";
	char word[50];
	cin >> word;
	fstream f("Catalog.txt", ios::in);
	char buffer[50];
	int record_number = 1;
	bool result = false;
	while (!f.eof())
	{
		f >> buffer;
		f.ignore(300, '\n');
		if (!strcmp(buffer, word))
		{
			cout << "Найдено в записи № " << record_number << "\n";
			result = true;
		}
		record_number++;
	}
	if (result == false) cout << "Нет совпадений\n";
	cout << endl;
}

void Catalog::SearchOwner() // Поиск по владельцу
{
	cout << "Введите искомое слово\n";
	char word[50];
	cin >> word;
	fstream f("Catalog.txt", ios::in);
	char buffer[50];
	int record_number = 1;
	bool result = false;
	while (!f.eof())
	{
		f >> buffer >> buffer;
		f.ignore(300, '\n');
		if (!strcmp(buffer, word))
		{
			cout << "Найдено в записи № " << record_number << "\n";
			result = true;
		}
		record_number++;
	}
	if (result == false) cout << "Нет совпадений\n";
	cout << endl;
}

void Catalog::SearchPhone() // Поиск по номеру телефона
{
	cout << "Введите искомое слово\n";
	char word[50];
	cin >> word;
	fstream f("Catalog.txt", ios::in);
	char buffer[50];
	int record_number = 1;
	bool result = false;
	while (!f.eof())
	{
		f >> buffer >> buffer >> buffer;
		f.ignore(300, '\n');
		if (!strcmp(buffer, word))
		{
			cout << "Найдено в записи № " << record_number << "\n";
			result = true;
		}
		record_number++;
	}
	if (result == false) cout << "Нет совпадений\n";
	cout << endl;
}

void Catalog::SearchOccupation() // Поиск по роду деятельности
{
	cout << "Введите искомое слово\n";
	char word[50];
	cin >> word;
	fstream f("Catalog.txt", ios::in);
	char buffer[50];
	int record_number = 1;
	bool result = false;
	while (!f.eof())
	{
		f >> buffer >> buffer >> buffer >> buffer >> buffer;
		f.ignore(300, '\n');
		if (!strcmp(buffer, word))
		{
			cout << "Найдено в записи № " << record_number << "\n";
			result = true;
		}
		record_number++;
	}
	if (result == false) cout << "Нет совпадений\n";
	cout << endl;
}

void main()
{
	SetConsoleCP(1251); // Ввод с консоли в кодировке 1251
	SetConsoleOutputCP(1251); // Вывод на консоль в кодировке 1251. Нужно изменить шрифт консоли на Lucida Console или Consolas
	Catalog *a;
	while (1)
	{
		cout << "Введите 1 для добавления новой структуры в файл\nВведите 2 для показа всех структур из файла\n";
		cout << "Введите 3 для выхода\nВведите 4 для поиска по названию\nВведите 5 для поиска по владельцу\n";
		cout << "Введите 6 для поиска по номеру телефона\nВведите 7 для поиска по роду деятельности\n";
		int choice;
		cin >> choice;
		switch (choice){
		case 1: // Добавление записи
			a = new Catalog;
			a->Put();
			a->SaveToFile();
			delete a;
			break;
		case 2: // Показ всех записей
			Catalog::ShowFromFile();
			break;
		case 3:
			cout << "До Свидания\n";
			return;
		case 4: // Поиск по названию
			Catalog::SearchFirm(); 
			break;
		case 5: // Поиск по владельцу
			Catalog::SearchOwner(); 
			break;
		case 6: // Поиск по номеру телефона
			Catalog::SearchPhone();
			break;
		case 7: // Поиск по роду деятельности
			Catalog::SearchOccupation();
			break;
		default:
			cout << "Неверный Ввод\n";
		}
	} 
}
